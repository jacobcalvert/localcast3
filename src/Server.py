##############################################################
# Module:       Server
# Author:       Jacob Calvert (jacob+github@jacobncalvert.com)
# Revision:     1.3.1 (major.minor.maint)
# Description:  This is the entry module for the app. The
# server is set up here and all the handlers are initialized.
###############################################################

import tornado
import tornado.ioloop
import tornado.websocket
import tornado.web
import json
from urlparse import parse_qs as qs_decode
import Enums
import Database


class APIRoot(tornado.web.RequestHandler):
    """
    class APIRoot -- a dummy class for the APIs root url, will be filled in later
    """
    def get(self, *args, **kwargs):
        """
        :param args: args trapped from the regex of the APIRoot handler assignment
        :param kwargs: no idea what kwargs are in this instance
        :return: None
        """
        print args
        print kwargs


class APIHandler(tornado.web.RequestHandler):
    """
    class APIHandler -- main handler for calls to the API.
    """
    def get(self, *args):
        """
        writes to the client a json representation of the response generated by the request
        made by 'args'
        :param args: args contains the regex trapped out beyond the '/api/' part of the url
        :return: None
        """
        self.write(json.dumps(APIHandler.parse_uri_to_action(args, self.request.query)))

    @staticmethod
    def parse_uri_to_action(url, qstring):
        """
        parses an API request to an actionable item in the subsystem
        :param url: url of the request
        :param qstring: query string of the request
        :return: a response object to the request made by 'url' and 'qstring'
        """
        qstring = qs_decode(qstring)
        url_parts = url[0].split("/")
        if len(url_parts) > 2:
            # get id
            if len(qstring):
                #filtering

                pass
            else:
                # not filtering

                pass
        else:
            #get all
            if len(qstring) > 0:
                if "media_type" in qstring:
                    if qstring["media_type"][0] == "audio":
                        return Database.DB.get_music()
                    elif qstring["media_type"][0] == "video":
                        return Database.DB.get_video()
                    elif qstring["media_type"][0] == "image":
                        return Database.DB.get_images()
                elif "query" in qstring:
                    return Database.DB.search(qstring["query"][0])

            else:
                # not filtering

                return Database.DB.get_all()


def main():
    """
    Entry point for the application. Sets up the webserver and handlers.
    :return: None
    """
    app = tornado.web.Application([
        (r"/api/?", APIRoot),
        (r"/api/(.+)/?", APIHandler),
        (r"/media/(.*)", tornado.web.StaticFileHandler, {'path': Enums.Paths.MEDIA_BASE}),
        (r"/(.*)", tornado.web.StaticFileHandler, {'path': Enums.Paths.HTML_BASE}),
    ]
    )
    fh = Database.FileHelper(Enums.Paths.MEDIA_BASE)
    fh.filter()

    app.listen(Enums.Server.PORT)
    tornado.ioloop.IOLoop.instance().start()  # This is a blocking operation...

main()